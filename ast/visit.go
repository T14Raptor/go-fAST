// Code generated by gen_visit.go; DO NOT EDIT.
package ast

type Visitor interface {
	VisitArrayLiteral(n *ArrayLiteral)
	VisitArrayPattern(n *ArrayPattern)
	VisitArrowFunctionLiteral(n *ArrowFunctionLiteral)
	VisitAssignExpression(n *AssignExpression)
	VisitAwaitExpression(n *AwaitExpression)
	VisitBadStatement(n *BadStatement)
	VisitBinaryExpression(n *BinaryExpression)
	VisitBindingTarget(n *BindingTarget)
	VisitBlockStatement(n *BlockStatement)
	VisitBooleanLiteral(n *BooleanLiteral)
	VisitBreakStatement(n *BreakStatement)
	VisitCallExpression(n *CallExpression)
	VisitCaseStatement(n *CaseStatement)
	VisitCaseStatements(n *CaseStatements)
	VisitCatchStatement(n *CatchStatement)
	VisitClassDeclaration(n *ClassDeclaration)
	VisitClassElement(n *ClassElement)
	VisitClassElements(n *ClassElements)
	VisitClassLiteral(n *ClassLiteral)
	VisitClassStaticBlock(n *ClassStaticBlock)
	VisitConciseBody(n *ConciseBody)
	VisitConditionalExpression(n *ConditionalExpression)
	VisitContinueStatement(n *ContinueStatement)
	VisitDebuggerStatement(n *DebuggerStatement)
	VisitDoWhileStatement(n *DoWhileStatement)
	VisitEmptyStatement(n *EmptyStatement)
	VisitExpression(n *Expression)
	VisitExpressionStatement(n *ExpressionStatement)
	VisitExpressions(n *Expressions)
	VisitFieldDefinition(n *FieldDefinition)
	VisitForInStatement(n *ForInStatement)
	VisitForInto(n *ForInto)
	VisitForLoopInitializer(n *ForLoopInitializer)
	VisitForOfStatement(n *ForOfStatement)
	VisitForStatement(n *ForStatement)
	VisitFunctionDeclaration(n *FunctionDeclaration)
	VisitFunctionLiteral(n *FunctionLiteral)
	VisitIdentifier(n *Identifier)
	VisitIfStatement(n *IfStatement)
	VisitInvalidExpression(n *InvalidExpression)
	VisitLabelledStatement(n *LabelledStatement)
	VisitMemberExpression(n *MemberExpression)
	VisitMetaProperty(n *MetaProperty)
	VisitMethodDefinition(n *MethodDefinition)
	VisitNewExpression(n *NewExpression)
	VisitNullLiteral(n *NullLiteral)
	VisitNumberLiteral(n *NumberLiteral)
	VisitObjectLiteral(n *ObjectLiteral)
	VisitObjectPattern(n *ObjectPattern)
	VisitOptional(n *Optional)
	VisitOptionalChain(n *OptionalChain)
	VisitParameterList(n *ParameterList)
	VisitPrivateDotExpression(n *PrivateDotExpression)
	VisitPrivateIdentifier(n *PrivateIdentifier)
	VisitProgram(n *Program)
	VisitProperties(n *Properties)
	VisitProperty(n *Property)
	VisitPropertyKeyed(n *PropertyKeyed)
	VisitPropertyShort(n *PropertyShort)
	VisitRegExpLiteral(n *RegExpLiteral)
	VisitReturnStatement(n *ReturnStatement)
	VisitSequenceExpression(n *SequenceExpression)
	VisitSpreadElement(n *SpreadElement)
	VisitStatement(n *Statement)
	VisitStatements(n *Statements)
	VisitStringLiteral(n *StringLiteral)
	VisitSuperExpression(n *SuperExpression)
	VisitSwitchStatement(n *SwitchStatement)
	VisitTemplateElement(n *TemplateElement)
	VisitTemplateElements(n *TemplateElements)
	VisitTemplateLiteral(n *TemplateLiteral)
	VisitThisExpression(n *ThisExpression)
	VisitThrowStatement(n *ThrowStatement)
	VisitTryStatement(n *TryStatement)
	VisitUnaryExpression(n *UnaryExpression)
	VisitUpdateExpression(n *UpdateExpression)
	VisitVariableDeclaration(n *VariableDeclaration)
	VisitVariableDeclarator(n *VariableDeclarator)
	VisitVariableDeclarators(n *VariableDeclarators)
	VisitWhileStatement(n *WhileStatement)
	VisitWithStatement(n *WithStatement)
	VisitYieldExpression(n *YieldExpression)
}
type NoopVisitor struct {
	V Visitor
}

func (nv *NoopVisitor) VisitArrayLiteral(n *ArrayLiteral) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitArrayPattern(n *ArrayPattern) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitArrowFunctionLiteral(n *ArrowFunctionLiteral) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitAssignExpression(n *AssignExpression) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitAwaitExpression(n *AwaitExpression) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitBadStatement(n *BadStatement) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitBinaryExpression(n *BinaryExpression) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitBindingTarget(n *BindingTarget) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitBlockStatement(n *BlockStatement) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitBooleanLiteral(n *BooleanLiteral) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitBreakStatement(n *BreakStatement) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitCallExpression(n *CallExpression) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitCaseStatement(n *CaseStatement) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitCaseStatements(n *CaseStatements) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitCatchStatement(n *CatchStatement) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitClassDeclaration(n *ClassDeclaration) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitClassElement(n *ClassElement) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitClassElements(n *ClassElements) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitClassLiteral(n *ClassLiteral) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitClassStaticBlock(n *ClassStaticBlock) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitConciseBody(n *ConciseBody) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitConditionalExpression(n *ConditionalExpression) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitContinueStatement(n *ContinueStatement) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitDebuggerStatement(n *DebuggerStatement) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitDoWhileStatement(n *DoWhileStatement) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitEmptyStatement(n *EmptyStatement) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitExpression(n *Expression) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitExpressionStatement(n *ExpressionStatement) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitExpressions(n *Expressions) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitFieldDefinition(n *FieldDefinition) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitForInStatement(n *ForInStatement) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitForInto(n *ForInto) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitForLoopInitializer(n *ForLoopInitializer) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitForOfStatement(n *ForOfStatement) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitForStatement(n *ForStatement) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitFunctionDeclaration(n *FunctionDeclaration) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitFunctionLiteral(n *FunctionLiteral) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitIdentifier(n *Identifier) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitIfStatement(n *IfStatement) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitInvalidExpression(n *InvalidExpression) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitLabelledStatement(n *LabelledStatement) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitMemberExpression(n *MemberExpression) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitMetaProperty(n *MetaProperty) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitMethodDefinition(n *MethodDefinition) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitNewExpression(n *NewExpression) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitNullLiteral(n *NullLiteral) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitNumberLiteral(n *NumberLiteral) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitObjectLiteral(n *ObjectLiteral) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitObjectPattern(n *ObjectPattern) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitOptional(n *Optional) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitOptionalChain(n *OptionalChain) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitParameterList(n *ParameterList) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitPrivateDotExpression(n *PrivateDotExpression) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitPrivateIdentifier(n *PrivateIdentifier) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitProgram(n *Program) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitProperties(n *Properties) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitProperty(n *Property) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitPropertyKeyed(n *PropertyKeyed) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitPropertyShort(n *PropertyShort) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitRegExpLiteral(n *RegExpLiteral) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitReturnStatement(n *ReturnStatement) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitSequenceExpression(n *SequenceExpression) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitSpreadElement(n *SpreadElement) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitStatement(n *Statement) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitStatements(n *Statements) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitStringLiteral(n *StringLiteral) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitSuperExpression(n *SuperExpression) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitSwitchStatement(n *SwitchStatement) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitTemplateElement(n *TemplateElement) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitTemplateElements(n *TemplateElements) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitTemplateLiteral(n *TemplateLiteral) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitThisExpression(n *ThisExpression) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitThrowStatement(n *ThrowStatement) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitTryStatement(n *TryStatement) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitUnaryExpression(n *UnaryExpression) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitUpdateExpression(n *UpdateExpression) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitVariableDeclaration(n *VariableDeclaration) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitVariableDeclarator(n *VariableDeclarator) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitVariableDeclarators(n *VariableDeclarators) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitWhileStatement(n *WhileStatement) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitWithStatement(n *WithStatement) {
	n.VisitChildrenWith(nv.V)
}
func (nv *NoopVisitor) VisitYieldExpression(n *YieldExpression) {
	n.VisitChildrenWith(nv.V)
}
func (n *ArrayLiteral) VisitWith(v Visitor) {
	v.VisitArrayLiteral(n)
}
func (n *ArrayLiteral) VisitChildrenWith(v Visitor) {
	n.Value.VisitWith(v)
}
func (n *ArrayPattern) VisitWith(v Visitor) {
	v.VisitArrayPattern(n)
}
func (n *ArrayPattern) VisitChildrenWith(v Visitor) {
	n.Elements.VisitWith(v)
	n.Rest.VisitWith(v)
}
func (n *ArrowFunctionLiteral) VisitWith(v Visitor) {
	v.VisitArrowFunctionLiteral(n)
}
func (n *ArrowFunctionLiteral) VisitChildrenWith(v Visitor) {
	n.ParameterList.VisitWith(v)
	n.Body.VisitWith(v)
}
func (n *AssignExpression) VisitWith(v Visitor) {
	v.VisitAssignExpression(n)
}
func (n *AssignExpression) VisitChildrenWith(v Visitor) {
	n.Left.VisitWith(v)
	n.Right.VisitWith(v)
}
func (n *AwaitExpression) VisitWith(v Visitor) {
	v.VisitAwaitExpression(n)
}
func (n *AwaitExpression) VisitChildrenWith(v Visitor) {
	n.Argument.VisitWith(v)
}
func (n *BadStatement) VisitWith(v Visitor) {
	v.VisitBadStatement(n)
}
func (n *BadStatement) VisitChildrenWith(v Visitor) {
}
func (n *BinaryExpression) VisitWith(v Visitor) {
	v.VisitBinaryExpression(n)
}
func (n *BinaryExpression) VisitChildrenWith(v Visitor) {
	n.Left.VisitWith(v)
	n.Right.VisitWith(v)
}
func (n *BindingTarget) VisitWith(v Visitor) {
	v.VisitBindingTarget(n)
}
func (n *BindingTarget) VisitChildrenWith(v Visitor) {
	if n.Target != nil {
		n.Target.VisitWith(v)
	}
}
func (n *BlockStatement) VisitWith(v Visitor) {
	v.VisitBlockStatement(n)
}
func (n *BlockStatement) VisitChildrenWith(v Visitor) {
	n.List.VisitWith(v)
}
func (n *BooleanLiteral) VisitWith(v Visitor) {
	v.VisitBooleanLiteral(n)
}
func (n *BooleanLiteral) VisitChildrenWith(v Visitor) {
}
func (n *BreakStatement) VisitWith(v Visitor) {
	v.VisitBreakStatement(n)
}
func (n *BreakStatement) VisitChildrenWith(v Visitor) {
	if n.Label != nil {
		n.Label.VisitWith(v)
	}
}
func (n *CallExpression) VisitWith(v Visitor) {
	v.VisitCallExpression(n)
}
func (n *CallExpression) VisitChildrenWith(v Visitor) {
	n.Callee.VisitWith(v)
	n.ArgumentList.VisitWith(v)
}
func (n *CaseStatement) VisitWith(v Visitor) {
	v.VisitCaseStatement(n)
}
func (n *CaseStatement) VisitChildrenWith(v Visitor) {
	if n.Test != nil {
		n.Test.VisitWith(v)
	}
	n.Consequent.VisitWith(v)
}
func (n *CaseStatements) VisitWith(v Visitor) {
	v.VisitCaseStatements(n)
}
func (n *CaseStatements) VisitChildrenWith(v Visitor) {
	for i := range *n {
		(*n)[i].VisitWith(v)
	}
}
func (n *CatchStatement) VisitWith(v Visitor) {
	v.VisitCatchStatement(n)
}
func (n *CatchStatement) VisitChildrenWith(v Visitor) {
	if n.Parameter != nil {
		n.Parameter.VisitWith(v)
	}
	n.Body.VisitWith(v)
}
func (n *ClassDeclaration) VisitWith(v Visitor) {
	v.VisitClassDeclaration(n)
}
func (n *ClassDeclaration) VisitChildrenWith(v Visitor) {
	n.Class.VisitWith(v)
}
func (n *ClassElement) VisitWith(v Visitor) {
	v.VisitClassElement(n)
}
func (n *ClassElement) VisitChildrenWith(v Visitor) {
	n.Element.VisitWith(v)
}
func (n *ClassElements) VisitWith(v Visitor) {
	v.VisitClassElements(n)
}
func (n *ClassElements) VisitChildrenWith(v Visitor) {
	for i := range *n {
		(*n)[i].VisitWith(v)
	}
}
func (n *ClassLiteral) VisitWith(v Visitor) {
	v.VisitClassLiteral(n)
}
func (n *ClassLiteral) VisitChildrenWith(v Visitor) {
	if n.Name != nil {
		n.Name.VisitWith(v)
	}
	if n.SuperClass != nil {
		n.SuperClass.VisitWith(v)
	}
	n.Body.VisitWith(v)
}
func (n *ClassStaticBlock) VisitWith(v Visitor) {
	v.VisitClassStaticBlock(n)
}
func (n *ClassStaticBlock) VisitChildrenWith(v Visitor) {
	n.Block.VisitWith(v)
}
func (n *ConciseBody) VisitWith(v Visitor) {
	v.VisitConciseBody(n)
}
func (n *ConciseBody) VisitChildrenWith(v Visitor) {
	n.Body.VisitWith(v)
}
func (n *ConditionalExpression) VisitWith(v Visitor) {
	v.VisitConditionalExpression(n)
}
func (n *ConditionalExpression) VisitChildrenWith(v Visitor) {
	n.Test.VisitWith(v)
	n.Consequent.VisitWith(v)
	n.Alternate.VisitWith(v)
}
func (n *ContinueStatement) VisitWith(v Visitor) {
	v.VisitContinueStatement(n)
}
func (n *ContinueStatement) VisitChildrenWith(v Visitor) {
	if n.Label != nil {
		n.Label.VisitWith(v)
	}
}
func (n *DebuggerStatement) VisitWith(v Visitor) {
	v.VisitDebuggerStatement(n)
}
func (n *DebuggerStatement) VisitChildrenWith(v Visitor) {
}
func (n *DoWhileStatement) VisitWith(v Visitor) {
	v.VisitDoWhileStatement(n)
}
func (n *DoWhileStatement) VisitChildrenWith(v Visitor) {
	n.Test.VisitWith(v)
	n.Body.VisitWith(v)
}
func (n *EmptyStatement) VisitWith(v Visitor) {
	v.VisitEmptyStatement(n)
}
func (n *EmptyStatement) VisitChildrenWith(v Visitor) {
}
func (n *Expression) VisitWith(v Visitor) {
	v.VisitExpression(n)
}
func (n *Expression) VisitChildrenWith(v Visitor) {
	if n.Expr != nil {
		n.Expr.VisitWith(v)
	}
}
func (n *ExpressionStatement) VisitWith(v Visitor) {
	v.VisitExpressionStatement(n)
}
func (n *ExpressionStatement) VisitChildrenWith(v Visitor) {
	n.Expression.VisitWith(v)
}
func (n *Expressions) VisitWith(v Visitor) {
	v.VisitExpressions(n)
}
func (n *Expressions) VisitChildrenWith(v Visitor) {
	for i := range *n {
		(*n)[i].VisitWith(v)
	}
}
func (n *FieldDefinition) VisitWith(v Visitor) {
	v.VisitFieldDefinition(n)
}
func (n *FieldDefinition) VisitChildrenWith(v Visitor) {
	n.Key.VisitWith(v)
	if n.Initializer != nil {
		n.Initializer.VisitWith(v)
	}
}
func (n *ForInStatement) VisitWith(v Visitor) {
	v.VisitForInStatement(n)
}
func (n *ForInStatement) VisitChildrenWith(v Visitor) {
	n.Into.VisitWith(v)
	n.Source.VisitWith(v)
	n.Body.VisitWith(v)
}
func (n *ForInto) VisitWith(v Visitor) {
	v.VisitForInto(n)
}
func (n *ForInto) VisitChildrenWith(v Visitor) {
	n.Into.VisitWith(v)
}
func (n *ForLoopInitializer) VisitWith(v Visitor) {
	v.VisitForLoopInitializer(n)
}
func (n *ForLoopInitializer) VisitChildrenWith(v Visitor) {
	n.Initializer.VisitWith(v)
}
func (n *ForOfStatement) VisitWith(v Visitor) {
	v.VisitForOfStatement(n)
}
func (n *ForOfStatement) VisitChildrenWith(v Visitor) {
	n.Into.VisitWith(v)
	n.Source.VisitWith(v)
	n.Body.VisitWith(v)
}
func (n *ForStatement) VisitWith(v Visitor) {
	v.VisitForStatement(n)
}
func (n *ForStatement) VisitChildrenWith(v Visitor) {
	if n.Initializer != nil {
		n.Initializer.VisitWith(v)
	}
	n.Update.VisitWith(v)
	n.Test.VisitWith(v)
	n.Body.VisitWith(v)
}
func (n *FunctionDeclaration) VisitWith(v Visitor) {
	v.VisitFunctionDeclaration(n)
}
func (n *FunctionDeclaration) VisitChildrenWith(v Visitor) {
	n.Function.VisitWith(v)
}
func (n *FunctionLiteral) VisitWith(v Visitor) {
	v.VisitFunctionLiteral(n)
}
func (n *FunctionLiteral) VisitChildrenWith(v Visitor) {
	n.Name.VisitWith(v)
	n.ParameterList.VisitWith(v)
	n.Body.VisitWith(v)
}
func (n *Identifier) VisitWith(v Visitor) {
	v.VisitIdentifier(n)
}
func (n *Identifier) VisitChildrenWith(v Visitor) {
}
func (n *IfStatement) VisitWith(v Visitor) {
	v.VisitIfStatement(n)
}
func (n *IfStatement) VisitChildrenWith(v Visitor) {
	n.Test.VisitWith(v)
	n.Consequent.VisitWith(v)
	if n.Alternate != nil {
		n.Alternate.VisitWith(v)
	}
}
func (n *InvalidExpression) VisitWith(v Visitor) {
	v.VisitInvalidExpression(n)
}
func (n *InvalidExpression) VisitChildrenWith(v Visitor) {
}
func (n *LabelledStatement) VisitWith(v Visitor) {
	v.VisitLabelledStatement(n)
}
func (n *LabelledStatement) VisitChildrenWith(v Visitor) {
	n.Label.VisitWith(v)
	n.Statement.VisitWith(v)
}
func (n *MemberExpression) VisitWith(v Visitor) {
	v.VisitMemberExpression(n)
}
func (n *MemberExpression) VisitChildrenWith(v Visitor) {
	n.Object.VisitWith(v)
	n.Property.VisitWith(v)
}
func (n *MetaProperty) VisitWith(v Visitor) {
	v.VisitMetaProperty(n)
}
func (n *MetaProperty) VisitChildrenWith(v Visitor) {
	n.Meta.VisitWith(v)
}
func (n *MethodDefinition) VisitWith(v Visitor) {
	v.VisitMethodDefinition(n)
}
func (n *MethodDefinition) VisitChildrenWith(v Visitor) {
	n.Key.VisitWith(v)
	n.Body.VisitWith(v)
}
func (n *NewExpression) VisitWith(v Visitor) {
	v.VisitNewExpression(n)
}
func (n *NewExpression) VisitChildrenWith(v Visitor) {
	n.Callee.VisitWith(v)
	n.ArgumentList.VisitWith(v)
}
func (n *NullLiteral) VisitWith(v Visitor) {
	v.VisitNullLiteral(n)
}
func (n *NullLiteral) VisitChildrenWith(v Visitor) {
}
func (n *NumberLiteral) VisitWith(v Visitor) {
	v.VisitNumberLiteral(n)
}
func (n *NumberLiteral) VisitChildrenWith(v Visitor) {
}
func (n *ObjectLiteral) VisitWith(v Visitor) {
	v.VisitObjectLiteral(n)
}
func (n *ObjectLiteral) VisitChildrenWith(v Visitor) {
	n.Value.VisitWith(v)
}
func (n *ObjectPattern) VisitWith(v Visitor) {
	v.VisitObjectPattern(n)
}
func (n *ObjectPattern) VisitChildrenWith(v Visitor) {
	n.Properties.VisitWith(v)
	if n.Rest != nil {
		n.Rest.VisitWith(v)
	}
}
func (n *Optional) VisitWith(v Visitor) {
	v.VisitOptional(n)
}
func (n *Optional) VisitChildrenWith(v Visitor) {
	n.Expr.VisitWith(v)
}
func (n *OptionalChain) VisitWith(v Visitor) {
	v.VisitOptionalChain(n)
}
func (n *OptionalChain) VisitChildrenWith(v Visitor) {
	n.Base.VisitWith(v)
}
func (n *ParameterList) VisitWith(v Visitor) {
	v.VisitParameterList(n)
}
func (n *ParameterList) VisitChildrenWith(v Visitor) {
	n.List.VisitWith(v)
	if n.Rest != nil {
		n.Rest.VisitWith(v)
	}
}
func (n *PrivateDotExpression) VisitWith(v Visitor) {
	v.VisitPrivateDotExpression(n)
}
func (n *PrivateDotExpression) VisitChildrenWith(v Visitor) {
	n.Left.VisitWith(v)
	n.Identifier.VisitWith(v)
}
func (n *PrivateIdentifier) VisitWith(v Visitor) {
	v.VisitPrivateIdentifier(n)
}
func (n *PrivateIdentifier) VisitChildrenWith(v Visitor) {
	n.Identifier.VisitWith(v)
}
func (n *Program) VisitWith(v Visitor) {
	v.VisitProgram(n)
}
func (n *Program) VisitChildrenWith(v Visitor) {
	n.Body.VisitWith(v)
}
func (n *Properties) VisitWith(v Visitor) {
	v.VisitProperties(n)
}
func (n *Properties) VisitChildrenWith(v Visitor) {
	for i := range *n {
		(*n)[i].VisitWith(v)
	}
}
func (n *Property) VisitWith(v Visitor) {
	v.VisitProperty(n)
}
func (n *Property) VisitChildrenWith(v Visitor) {
	n.Prop.VisitWith(v)
}
func (n *PropertyKeyed) VisitWith(v Visitor) {
	v.VisitPropertyKeyed(n)
}
func (n *PropertyKeyed) VisitChildrenWith(v Visitor) {
	n.Key.VisitWith(v)
	n.Value.VisitWith(v)
}
func (n *PropertyShort) VisitWith(v Visitor) {
	v.VisitPropertyShort(n)
}
func (n *PropertyShort) VisitChildrenWith(v Visitor) {
	n.Name.VisitWith(v)
	n.Initializer.VisitWith(v)
}
func (n *RegExpLiteral) VisitWith(v Visitor) {
	v.VisitRegExpLiteral(n)
}
func (n *RegExpLiteral) VisitChildrenWith(v Visitor) {
}
func (n *ReturnStatement) VisitWith(v Visitor) {
	v.VisitReturnStatement(n)
}
func (n *ReturnStatement) VisitChildrenWith(v Visitor) {
	if n.Argument != nil {
		n.Argument.VisitWith(v)
	}
}
func (n *SequenceExpression) VisitWith(v Visitor) {
	v.VisitSequenceExpression(n)
}
func (n *SequenceExpression) VisitChildrenWith(v Visitor) {
	n.Sequence.VisitWith(v)
}
func (n *SpreadElement) VisitWith(v Visitor) {
	v.VisitSpreadElement(n)
}
func (n *SpreadElement) VisitChildrenWith(v Visitor) {
	n.Expression.VisitWith(v)
}
func (n *Statement) VisitWith(v Visitor) {
	v.VisitStatement(n)
}
func (n *Statement) VisitChildrenWith(v Visitor) {
	if n.Stmt != nil {
		n.Stmt.VisitWith(v)
	}
}
func (n *Statements) VisitWith(v Visitor) {
	v.VisitStatements(n)
}
func (n *Statements) VisitChildrenWith(v Visitor) {
	for i := range *n {
		(*n)[i].VisitWith(v)
	}
}
func (n *StringLiteral) VisitWith(v Visitor) {
	v.VisitStringLiteral(n)
}
func (n *StringLiteral) VisitChildrenWith(v Visitor) {
}
func (n *SuperExpression) VisitWith(v Visitor) {
	v.VisitSuperExpression(n)
}
func (n *SuperExpression) VisitChildrenWith(v Visitor) {
}
func (n *SwitchStatement) VisitWith(v Visitor) {
	v.VisitSwitchStatement(n)
}
func (n *SwitchStatement) VisitChildrenWith(v Visitor) {
	n.Discriminant.VisitWith(v)
	n.Body.VisitWith(v)
}
func (n *TemplateElement) VisitWith(v Visitor) {
	v.VisitTemplateElement(n)
}
func (n *TemplateElement) VisitChildrenWith(v Visitor) {
}
func (n *TemplateElements) VisitWith(v Visitor) {
	v.VisitTemplateElements(n)
}
func (n *TemplateElements) VisitChildrenWith(v Visitor) {
	for i := range *n {
		(*n)[i].VisitWith(v)
	}
}
func (n *TemplateLiteral) VisitWith(v Visitor) {
	v.VisitTemplateLiteral(n)
}
func (n *TemplateLiteral) VisitChildrenWith(v Visitor) {
	if n.Tag != nil {
		n.Tag.VisitWith(v)
	}
	n.Elements.VisitWith(v)
	n.Expressions.VisitWith(v)
}
func (n *ThisExpression) VisitWith(v Visitor) {
	v.VisitThisExpression(n)
}
func (n *ThisExpression) VisitChildrenWith(v Visitor) {
}
func (n *ThrowStatement) VisitWith(v Visitor) {
	v.VisitThrowStatement(n)
}
func (n *ThrowStatement) VisitChildrenWith(v Visitor) {
	n.Argument.VisitWith(v)
}
func (n *TryStatement) VisitWith(v Visitor) {
	v.VisitTryStatement(n)
}
func (n *TryStatement) VisitChildrenWith(v Visitor) {
	n.Body.VisitWith(v)
	if n.Catch != nil {
		n.Catch.VisitWith(v)
	}
	if n.Finally != nil {
		n.Finally.VisitWith(v)
	}
}
func (n *UnaryExpression) VisitWith(v Visitor) {
	v.VisitUnaryExpression(n)
}
func (n *UnaryExpression) VisitChildrenWith(v Visitor) {
	n.Operand.VisitWith(v)
}
func (n *UpdateExpression) VisitWith(v Visitor) {
	v.VisitUpdateExpression(n)
}
func (n *UpdateExpression) VisitChildrenWith(v Visitor) {
	n.Operand.VisitWith(v)
}
func (n *VariableDeclaration) VisitWith(v Visitor) {
	v.VisitVariableDeclaration(n)
}
func (n *VariableDeclaration) VisitChildrenWith(v Visitor) {
	n.List.VisitWith(v)
}
func (n *VariableDeclarator) VisitWith(v Visitor) {
	v.VisitVariableDeclarator(n)
}
func (n *VariableDeclarator) VisitChildrenWith(v Visitor) {
	n.Target.VisitWith(v)
	if n.Initializer != nil {
		n.Initializer.VisitWith(v)
	}
}
func (n *VariableDeclarators) VisitWith(v Visitor) {
	v.VisitVariableDeclarators(n)
}
func (n *VariableDeclarators) VisitChildrenWith(v Visitor) {
	for i := range *n {
		(*n)[i].VisitWith(v)
	}
}
func (n *WhileStatement) VisitWith(v Visitor) {
	v.VisitWhileStatement(n)
}
func (n *WhileStatement) VisitChildrenWith(v Visitor) {
	n.Test.VisitWith(v)
	n.Body.VisitWith(v)
}
func (n *WithStatement) VisitWith(v Visitor) {
	v.VisitWithStatement(n)
}
func (n *WithStatement) VisitChildrenWith(v Visitor) {
	n.Object.VisitWith(v)
	n.Body.VisitWith(v)
}
func (n *YieldExpression) VisitWith(v Visitor) {
	v.VisitYieldExpression(n)
}
func (n *YieldExpression) VisitChildrenWith(v Visitor) {
	n.Argument.VisitWith(v)
}
